<objdefs>
	<obj.normal id="polySynR" uuid="53b04874696932a37bceaa168bd5d9efb743716d" sha="d2b06e818348b14523c68fd021077192860093c0">
	<upgradeSha>b8deb97637e54be31fcb61a849e4fa406e72256e</upgradeSha>
	<sDescription>Dan's kick-ass poly synth</sDescription>
	<author>Dynamite</author>
	
	<inlets/>
	
	<outlets>

		<frac32buffer name="L" description="Left"/>
		<frac32buffer name="R" description="Right"/>

	</outlets>
         
	<displays/>
	

	<params/>
	
	<attribs/>
	
	<includes>
		<include>./settings.h</include>
		<include>./PitchTables.c</include>
		<include>./synthControls.h</include>
		<include>./midiHandler.h</include>
		<include>./fileLoader.h</include>
		<include>./lcdLib.h</include>
		<include>./serialMidi.h</include>
		<include>./helperFunctions.c</include>
	</includes>
	<depends>
		<depend>ADAU1361</depend>
	</depends>

	
	<code.declaration><![CDATA[
	
		uint32_t phase[OSC_CHILD_CNT];
		uint32_t phaseInc[OSC_CHILD_CNT];
		biquad_coefficients filt_coeff[OSC_CHILD_CNT];
		int32_t samps[OSC_CHILD_CNT][4];
		int32_t ctrlPitch[OSC_CNT];
		uint32_t ctrlGain[OSC_CNT];
		int32_t ctrlCut[OSC_CNT];
		uint32_t ctrlRes[OSC_CNT];
		uint32_t kGainSum[OSC_CHILD_CNT];
		int32_t kG[OSC_CHILD_CNT];
		uint32_t sGain[OSC_CHILD_CNT];
		uint32_t sSEEK[OSC_CHILD_CNT];
		uint32_t kPan[OSC_CNT];
		int32_t wavSignal[OSC_CHILD_CNT];
		//uint32_t kPanSum[OSC_CNT];
		uint32_t kMain[OSC_CNT];
		uint32_t kMainOut;
		uint8_t a_ind = 0;
		uint8_t tLoops;
		
		
		//uint8_t knoiseOsc[OSC_CHILD_CNT];
		//uint8_t kwaveOsc[OSC_CHILD_CNT];
		//uint8_t knoiseCnt;
		//uint8_t kwaveCnt;

		//uint8_t kfiltOsc[OSC_CHILD_CNT];
		//uint8_t kfiltCnt;

		//uint8_t kArpOsc[OSC_CNT];
		//uint8_t kArpCnt;
		
		//uint8_t kAEnvOsc[OSC_CNT];
		//uint8_t kAEnvCnt;

		//uint8_t kNoAmpOsc[OSC_CNT];
		//uint8_t kNoAmpCnt;
		uint32_t arpFilt[OSC_CNT];
		//uint32_t filtTrack[OSC_CNT];
		uint32_t fEnvFrq[OSC_CNT];
		uint32_t arpOn[OSC_CNT];
		uint32_t pEnvOn[OSC_CNT];
		uint32_t fEnvOn[OSC_CNT];
		uint32_t filtOn[OSC_CNT];
		uint32_t modMask[OSC_CNT];
		uint32_t isAudio[OSC_CNT];
		int32_t *audioSrc[OSC_CHILD_CNT];
		//uint32_t gateMask[OSC_CNT];
		uint32_t sWaveMask[OSC_CNT];
		//uint32_t sFiltMask;
		
		//separate thread stuff
		msg_t ThreadX2()	
		{
			//initGraphic();
			//loop and monitor for input
			while(!chThdShouldTerminate())
			{
				
				
				handleKnobs();
				checkFileQueue(); 
				checkHarmQueue(); 
				updatePitRatio();
				checkWriteElem(); 
				
				//memset(audioSrc, NULL, sizeof(audioSrc));
				//memset(isAudio, 0, sizeof(isAudio));
				
				for(uint8_t parent = 0; parent < OSC_CNT; parent++)
				{
					pEnvOn[parent] = FULLMASK(parent, bitPEnv);
					fEnvOn[parent] = FULLMASK(parent, bitFEnv);
					arpOn[parent] = FULLMASK(parent, bitArp);
					arpFilt[parent] = FULLMASK(parent, bitArpFilt);
					filtOn[parent] = FULLMASK(parent, bitFilt);
					fEnvFrq[parent] = FULLMASK(parent, bitFECut);
					sWaveMask[parent] = FULLMASK(parent, bitWave);
					modMask[parent] = FULLMASK(parent, bitMod);
										
					uint32_t do_inc = 0;
					uint32_t sourceInd = 40;
					int32_t *firstSrc = NULL;
					if(SHIFTMASK(parent, bitAudio))
					{
						sourceInd = ((toggles[parent] >> (bitAudio + 1)) & 0xF);
						
						//audio in
						if(sourceInd < 3)
						{
							firstSrc = &(lastAudio[sourceInd]);
						}	
						else
						{
							sourceInd -= 3;
							//main 
							if(sourceInd >= OSC_CNT)
							{
								firstSrc = &lastMain;
							}
							//poly to poly
							else if(sourceInd < POLY_CNT && parent < POLY_CNT)
							{
								firstSrc = &(lastSignal[firstChild[sourceInd]]);
								do_inc = 1;
							}
							//poly to mono
							else if(sourceInd < POLY_CNT)
							{
								firstSrc = &(lastPolyCombo[sourceInd]);
							}
							//mono to either
							else
							{
								firstSrc = &(lastSignal[firstChild[sourceInd]]);
							}
						}
					}
					if(firstSrc != NULL)
					{
						isAudio[parent] = 1;
						uint8_t first = firstChild[parent];
						uint8_t last = ((parent < POLY_CNT)? NOTES_CNT: 1) + first;
						for(uint32_t child = first; child < last; ++child)
						{
							audioSrc[child] = firstSrc;
							if(do_inc) ++firstSrc;
						}	
					}
					else
					{
						isAudio[parent] = 0;
					}
					
					//curWave[parent] = (SHIFTMASK(parent, bitHarms))? &harmArray[parent][0]: &wavArray[parent][0];
					//gateMask[parent] = modMask[parent] & mod_src[GATE_MOD][parent];
					
				}
				
				/* switch(tLoops)
				{
					case 0: handleCCs(); break;
					case 1: handleKnobs(); break;
					case 2: checkFileQueue(); break;
					case 3: checkHarmQueue(); break;
					case 4: checkWriteElem(); break;
				}
				tLoops = indexIncrement(tLoops, 1, 5); */
				
				chThdSleepMicroseconds(5);
				//chThdSleepMilliseconds(1);
			}
			
			//thread stuff i don't understand
			chThdExit((msg_t)0);
		}
		static msg_t ThreadX(void *arg) 
		{
			((attr_parent *)arg)->ThreadX2();
		}
		WORKING_AREA(waThreadX, 1024);
		Thread *Thd;

	]]></code.declaration>
    
	<code.init><![CDATA[
		ADAU1961_WriteRegister(0x400E,(44<<2)+3);
		ADAU1961_WriteRegister(0x400F,(44<<2)+3);
		ADAU1961_WriteRegister(0x400B,(1<<3)+0);
		ADAU1961_WriteRegister(0x400D,(1<<3)+0);
		AudioInputMode = A_STEREO;
		
		
		//LogTextMessage("%d", int32_t(uint32_t(-1) >> 1));
		initLCD();
		initSynthStuff();
		writeStr(2,3,13,"load wav...");
		initFILES(WAVE);
		writeStr(2,3,13,"load patch...");
		initFILES(PATCH);
		initSerialMidi();
		resetPatch();
		
		updateLCDelems(SCRN, OBJ6);
		ticks = 0;
		for(uint8_t parent = 0; parent < OSC_CNT; parent++)
		{
			curWave[parent] = &harmArray[parent][0];				
		}
		Thd = chThdCreateStatic(waThreadX, sizeof(waThreadX), NORMALPRIO, ThreadX, (void *)this);

	]]></code.init>
	
	
	//kill the second thread?
     <code.dispose><![CDATA[
		i2cStop(&I2CD1);
		sdStop(&SD2);
		chThdTerminate(Thd);
		chThdWait(Thd);
	
	]]></code.dispose>
	
    <code.krate><![CDATA[
		ticks++;
		checkSerialMidi();
		handleNotes();
		handleCCs();
		scanInputs();
		//poop[poopSize -1] = ticks;
		//outlet_pit1 = poop[poopSize -1];
		//factor in all gain inputs (except envelope/wind)
		uint32_t seekR = SEEK[G_RATE];
		uint32_t mainR = SEEK[30];
		
		

		
		{
			uint8_t isSolo = SHIFTMASK(MAINTOG, bitSolo);
			
			for(uint8_t parent = 0; parent < OSC_CNT; parent++)
			{			
				//toggler for solo/mute
				uint32_t outGoal = (MASK(parent, bitMain) && (!isSolo || parent == oscInd))? MAX_INT32 : 0;
				kMain[parent] += ___SMMUL(outGoal - kMain[parent], mainR)<<1;
				
				
				//smoother for panning
				kPan[parent] += ___SMMUL((panLeft[parent]<<(FULL_SAT_SHIFT-4)) - kPan[parent], seekR)<<1;
				
				//smoother for vol knobs
				ctrlGain[parent] += ___SMMUL(GAIN[osc_gain[parent]] - ctrlGain[parent], seekR)<<1;
				
			}
			
		}
		if(main_clock1)
		{
			mainR = SEEK[14];
			main_mask = 0;
			--main_clock1;
		}
		else if(main_clock2)
		{
			memset(samps, 0, sizeof(samps));
			mainR = SEEK[14];
			main_mask = 0;
			--main_clock2;
		}
		else
		{
			mainR = SEEK[30];
			main_mask = MAX_INT32;
		}
		
		kMainOut += ___SMMUL((int32_t)(GAIN[main_gain] & main_mask) - (int32_t)kMainOut, mainR)<<1;
			

		//factor in all control-type pitch inputs (knobs) to apply a preset glide
		seekR = SEEK[P_RATE];
		{
			PIT_KNOBS *curPit = &pit_knobs[0];
			for(uint8_t parent = 0; parent < OSC_CNT; parent++)
			{
				ctrlPitch[parent] += ___SMMUL(curPit->pitch - ctrlPitch[parent], seekR)<<1;
				curPit++;
			}
			
		}
		
		
		
		//factor in all note-type inputs to apply the note glide
		for(uint8_t child = 0; child < OSC_CHILD_CNT; child++)
		{
			uint8_t parent = parents[child];
			kNote[child] += ___SMMUL(note[child] + monoPitch[parent] - kNote[child], SEEK[pit_knobs[parent].pit_glide])<<1;
			kGainSum[child] = ___SMMUL(VELGAIN[__USAT(vel[child] + monoVel[parent], 7)], ctrlGain[parent])<<1;
			if(arpOn[parent]) kGainSum[child] = ___SMMUL(kGainSum[child], arp_env[child].vel)<<1;
		}

		
		for(uint8_t child = 0; child < OSC_CHILD_CNT; child++)
		{	
			//kGainSum[child] = __USAT(kGainSum[child]>>1 + (modMask[parents[child]] & *(modSrc[AMP_MOD][child])), 30)<<1;
			//kGainSum[child] = __USAT(kGainSum[child] + (___SMMUL((modMask[parents[child]] & *(modSrc[AMP_MOD][child])), kGainSum[child])<<6), 31);
			kGainSum[child] = __USAT((kGainSum[child]>>1) + (___SMMUL((modMask[parents[child]] & *(modSrc[AMP_MOD][child])), kGainSum[child])<<5), 30)<<1;
			//kGainSum[child] = __USAT(kGainSum[child]>>1 + (___SMMUL((modMask[parents[child]] & *(modSrc[AMP_MOD][child])), kGainSum[child])<<5), 30)<<1;
			//if(gateMask[parents[child]]) kGainSum[child] =  ___SMMUL(kGainSum[child], *(modSrc[GATE_MOD][child]))<<1;// : kGainSum[child];
			if(modMask[parents[child]]) kGainSum[child] =  ___SMMUL(kGainSum[child], *(modSrc[GATE_MOD][child]))<<1;
		}
		
		for(uint8_t parent = 0; parent < OSC_CNT; parent++)
		{	
			ctrlCut[parent] += ___SMMUL(filt_knobs[parent].FRQ - ctrlCut[parent], seekR)<<1;
			ctrlRes[parent] += ___SMMUL((filt_knobs[parent].RES<<FULL_SAT_SHIFT) - ctrlRes[parent], SEEK[G_RATE])<<1;
		}
		
		seekR = SEEK[20];
		for(uint8_t cc = 0; cc < CC_CNT; cc++)
		{
			for(uint8_t osc = 0; osc < OSC_CNT; osc++)
			{
				kCCs[cc][osc] += ___SMMUL((___SMMUL(CC_vals[cc][osc], GAIN[midi_knobs[osc].CC_levs[cc]])<<1) - kCCs[cc][osc], seekR)<<1;
				//kCCs[cc][osc] += ___SMMUL(CC_vals[cc][osc] - kCCs[cc][osc], seekR)<<1;
			}
		}
	


		//pitch/filter envs
		{
			for(uint8_t env = 0; env < 2; env++)
			{
				PIT_ENV_KNOBS *curKnobs = (!env)? &pit_env_knobs[0] : &filt_env_knobs[0];
				PIT_ENV *curEnv = (!env)? &pit_env[0] : &filt_env[0];
				for(uint8_t osc = 0; osc < OSC_CNT; osc++)
				{
					//uint8_t isOn = (!env)? MASK(osc, bitPEnv): (MASK(osc, bitFilt) && MASK(osc, bitFEnv));
					uint8_t notes = childCnt(osc);//(osc < POLY_CNT)? NOTES_CNT: 1;
					for(uint8_t child = 0; child < notes; child++)
					{
						//if(isOn)
						{
							uint8_t tStage = curEnv->stage;
							if(tStage < FREE_STAGES && ++curEnv->clock >= TIME[curKnobs->time[tStage]])
							{
								tStage++;
								curEnv->stage++;
								curEnv->clock = 0;
							}
							else curEnv->val += ___SMMUL((curKnobs->pitch[tStage] - curEnv->val)<<1, SEEK[curKnobs->glide[tStage]]);
						}
						//else curEnv->val = 0;
						curEnv++;
					}
					curKnobs++;
				}
			}
		}
		
		



		
		//arpeggiator
		{
			ARP_KNOBS *curKnobs = &arpeggio[0];
			for(uint8_t osc = 0; osc < OSC_CNT; osc++)
			{
				//if(arpOn[osc])
				{
					uint8_t doAll = !SHIFTMASK(osc, bitArpSkip);
					uint8_t first = firstChild[osc];
					uint8_t last = ((osc < POLY_CNT)? NOTES_CNT: 1) + first;
					ARP_ENV *curEnv = &arp_env[first];
					uint8_t notes = childCnt(osc);//(osc < POLY_CNT)? NOTES_CNT: 1;
					
					for(uint8_t child = first; child < last; child++)
					{
						uint8_t tStage = curEnv->stage;
						curEnv->val += ___SMMUL(((curKnobs->P[curEnv->atk_stage]<<PITCH_COARSE) - curEnv->val)<<1, SEEK[curKnobs->G]);
						curEnv->vel += ___SMMUL((VELGAIN[curKnobs->V[curEnv->atk_stage]] - curEnv->vel), SEEK[curKnobs->G])<<1;
						
						//check timing for stage increment trigger
						if(++(curEnv->clock) >= curKnobs->T + (modMask[osc] & (*(modSrc[ARPTIME_MOD][child])>>18)))
						{
							tStage = indexIncrement(tStage, 1, curKnobs->steps);
							curEnv->stage = tStage;
							curEnv->clock = 0;
							uint8_t env = curKnobs->E[tStage];
							
							if(env || doAll) 
							{
								curEnv->atk_stage = tStage;
								//curEnv->vel = VELGAIN[curKnobs->V[tStage]];
								if(arpOn[osc] && amp_env[child].stage < 3)
								{
									if(env & AMP_MASK) amp_env[child].stage = 0;
									if(env & PIT_MASK) {pit_env[child].stage = 0; pit_env[child].clock = 0;}
									if(env & FILT_MASK) {filt_env[child].stage = 0; filt_env[child].clock = 0;}		
								}
							} 
						}
						curEnv++;
					}
				}
				curKnobs++;
			}
		}
		


		
		//sum pitches, get phase increment and pitch gain
		for(uint8_t child = 0; child < OSC_CHILD_CNT; child++)
		{
			uint8_t parent = parents[child];

			//sum the pitch
			/* int32_t curPitch = __USAT(ctrlPitch[parent] + 	//knob pitch
									kNote[child] +   //note pitch
									(pit_env[child].val & pEnvOn[parent]) + //pitch env
									(arp_env[child].val  & arpOn[parent] & ~arpFilt[parent]) + //arpeggiator 
									(modMask[parent] & (*(modSrc[PIT_MOD][child])>>2)), PITCH_SAT); //pitch mod */
			
			int32_t curPitch = __USAT(ctrlPitch[parent] + 	//knob pitch
									kNote[child] +   //note pitch
									(pit_env[child].val & pEnvOn[parent]) + //pitch env
									(arp_env[child].val  & arpOn[parent] & ~arpFilt[parent]), PITCH_SAT); //arpeggiator 
										
			phaseInc[child] = getPhaseInc(curPitch);
			
			//if(MASK(parent, bitFilt))
			{
				//sum the cutoff
				uint32_t curCut = ctrlCut[parent] + //knob cut
									(filt_env[child].val & fEnvOn[parent] & fEnvFrq[parent]) + //filter env
									(curPitch & FULLMASK(parent, bitFTrack)) + //pitch tracking
									(arp_env[child].val & arpOn[parent] & arpFilt[parent]) +//arp tracking
									(modMask[parent] & *(modSrc[CUT_MOD][child])); //cutoff mod
				
				
				uint32_t filtPhaseInc = getPhaseInc(curCut);

				//if(child == 0) outlet_pit = curCut;	 
				uint32_t curRes = INT_MAX - (__USAT((ctrlRes[parent]>>1) + ((~fEnvFrq[parent] & fEnvOn[parent] & (filt_env[child].val<<3))>>1) + (modMask[parent] & (*(modSrc[RES_MOD][child]))), 30)<<1);

				//uint32_t curRes = INT_MAX - __USAT(ctrlRes[parent] + (~fEnvFrq[parent] & (filt_env[child].val<<3)) + (modMask[parent] & (*(modSrc[RES_MOD][child])<<1)), 31);
				if(!filtOn[parent]) biquad_lp_coefs(&filt_coeff[child],0x77336AE6,INT_MAX);
				else if(filt_knobs[parent].TYPE == LOWPASS) biquad_lp_coefs(&filt_coeff[child],filtPhaseInc,curRes);
				else if(filt_knobs[parent].TYPE == BANDPASS) biquad_bp_coefs(&filt_coeff[child],filtPhaseInc,curRes);
				else biquad_hp_coefs(&filt_coeff[child],filtPhaseInc,curRes);
			}
			//else biquad_lp_coefs(&filt_coeff[child],0x77336AE6,INT_MAX);

		}
		
		
		//outlet_pit = preGain[0];
		for(uint8_t child = 0; child < OSC_CHILD_CNT; child++)
		{
			sSEEK[child] = SEEK_S_RATE[pit_knobs[parents[child]].vel_glide];
		}
		

		
		
		for(uint8_t osc = 0; osc < OSC_CNT; osc++)
		{
			uint8_t first = firstChild[osc];
			uint8_t last = ((osc < POLY_CNT)? NOTES_CNT: 1) + first;
			uint8_t amp = SHIFTMASK(osc, bitAEnv);
			//uint8_t wind = SHIFTMASK(osc, bitWind);
			uint8_t poly = SHIFTMASK(osc, bitPoly);
			uint8_t track = SHIFTMASK(osc, bitEnvs);
			
			
			//neither wind nor amp env
			if(!amp)
			{
				for(uint8_t child = first; child < last; child++)
				{
					amp_env[child].goal = MAX_INT32;
					amp_env[child].rate = SEEK[10];
				}
			}

			else
			{
				AMP_ENV_KNOBS *curKnobs = &amp_env_knobs[osc];
				AMP_ENV *curEnv = &amp_env[first];
				
				for(uint8_t child = first; child < last; child++)
				{
					/* if(wind && (!amp || !poly || !track || curEnv->stage < 3))
					{
						curEnv->goal = wind_gain[osc];
						curEnv->rate = SEEK[10];
						//if(!curEnv->stage) curEnv->stage = 1;
					}
					else */
					{
						uint8_t tStage = curEnv->stage;

						//check for completed attack or decay
						if(!tStage && curEnv->val == MAX_INT32) tStage++; 
						else if(tStage == 1 && curEnv->val - GAIN[curKnobs->goal[0]] < 40000) tStage++;
						
						//set the current rate
						curEnv->rate = SEEK[curKnobs->rate[tStage]];
						
						//set the current goal
						if(!tStage) curEnv->rate = ATTACK_K[curKnobs->rate[0]]; //curEnv->goal = MAX_INT32; 
						else if(tStage < 3) curEnv->goal = GAIN[curKnobs->goal[tStage -1]];
						else curEnv->goal = 0;

						curEnv->stage = tStage;
					}						
					curEnv++;
				}
			}
		}
		
		
		{
			AMP_ENV *curEnv = &amp_env[0];
			for(uint8_t child = 0; child < OSC_CHILD_CNT; child++)
			{					
				if(!curEnv->stage) 
				{
					curEnv->val += curEnv->rate;
					if(curEnv->val > MAX_INT32) curEnv->val = MAX_INT32;
				}
				else curEnv->val += ___SMMUL((curEnv->goal - curEnv->val), curEnv->rate)<<1;	
				curEnv++;
			}
		}			
		
		for(uint8_t child = 0; child < OSC_CHILD_CNT; child++)
		{
			kG[child] = ___SMMUL(amp_env[child].val, kGainSum[child])<<1;	
			/* int32_t dif = kG[child] - sGain[child];
			if(dif <= 1 && dif >= -1) sGain[child] = kG[child]; */
		}
		
	]]></code.krate>
	
	<code.srate><![CDATA[
		int32_t out = 0;

		//get the waveform/noise value	
		for(uint8_t parent = 0; parent < OSC_CNT; ++parent)
		{
			const uint8_t first = firstChild[parent];
			const uint8_t last = ((parent < POLY_CNT)? NOTES_CNT: 1) + first;
			
			
			if(sWaveMask[parent])
			{
				if(isAudio[parent])
				{
					for(uint8_t child = first; child < last; ++child)
					{
						wavSignal[child] = *(audioSrc[child]);
					}
				}
				else
				{
					
					for(uint8_t child = first; child < last; ++child)
					{
						phase[child] += phaseInc[child] + (modMask[parent] & (*(modSrc[PIT_MOD][child])>>1));
						int32_t wavInd = (phase[child])>>WAVE_SHIFT;
						int32_t amp1 = curWave[parent][wavInd];
						int32_t amp2 = curWave[parent][(wavInd+1) & 0x1FF];
						uint32_t off = ((phase[child]) & WAVE_MASK) << WAVE_INTERP;
						wavSignal[child] = ___SMMUL(amp1,INT_MAX-off);
						wavSignal[child] = ___SMMLA(amp2,off,wavSignal[child])<<1; 

					}
				}
			}
			else
			{
				for(uint8_t child = first; child < last; ++child)
				{
					wavSignal[child] = (int32_t)(GenerateRandomNumber());
				}
			}
			
		} 


		
		//get the overall gain value (and smooth it)
		// {

			// for(uint8_t child = 0; child < OSC_CHILD_CNT; child++)
			// {
				// sGain[child] += ___SMMUL(kG[child] - sGain[child], sSEEK[child]);
				// wavSignal[child] = ___SMMUL(wavSignal[child], sGain[child]);

			// }
		// }

		
		//filters	
		{
			biquad_coefficients *curCoeff = &filt_coeff[0];
			for(uint8_t child = 0; child < OSC_CHILD_CNT; ++child)
			{
				// sGain[child] += ___SMMUL(kG[child] - sGain[child], sSEEK[child]);
				// wavSignal[child] = ___SMMUL(wavSignal[child], sGain[child]);
				wavSignal[child] >>= 3;
				int32_t *curSamps = &samps[child][0];
				
				int32_t filtered = ___SMMUL(curCoeff->cxn_0, wavSignal[child]);
				filtered = ___SMMLA(curCoeff->cxn_1, *curSamps, filtered);
				filtered = ___SMMLA(curCoeff->cxn_2,  *(curSamps + 1), filtered);
				filtered = ___SMMLS(curCoeff->cyn_1,  *(curSamps + 2), filtered);
				filtered = ___SMMLS(curCoeff->cyn_2,  *(curSamps + 3), filtered)<<4;

				*(curSamps + 3) =  *(curSamps + 2);
				*(curSamps + 2) = filtered;
				*(curSamps + 1) =  *curSamps;
				*curSamps = wavSignal[child];
				
				sGain[child] += ___SMMUL(kG[child] - sGain[child], sSEEK[child]);
				filtered = ___SMMUL(filtered, sGain[child]) << 3;
				lastSignal[child] = filtered;
				++curCoeff;
			}
		}
		

		//apply main outs
		outlet_L = 0;
		outlet_R = 0;
		lastMain = 0;
	
		uint8_t first = 0;
		for(uint8_t parent = 0; parent < POLY_CNT; ++parent)
		{	
			
			const uint8_t last = first + NOTES_CNT;
			int32_t combo = 0;
			for(uint8_t child = first; child < last; ++child)
			{
				combo += lastSignal[child];
			}
			lastPolyCombo[parent] = combo;
			lastMain += combo;
			combo = ___SMMUL(kMain[parent], combo)<<1;
			
			
			//int32_t L = ___SMMUL(combo, __USAT((kPan[parent])+ (modMask[parent] & (*(modSrc[PAN_MOD][firstChild[parent]])>>1)),27))<<5;
			int32_t L = ___SMMUL(combo, kPan[parent])<<5;
			outlet_R += combo - L;
			outlet_L += L;
			first += NOTES_CNT;

		}
		
		first -= POLY_CNT;
		for(uint8_t parent = POLY_CNT; parent < OSC_CNT; ++parent)
		{	
			lastMain += lastSignal[parent + first];
			int32_t sig = ___SMMUL(kMain[parent], lastSignal[parent + first])<<1;
			//int32_t L = ___SMMUL(sig,  __USAT((kPan[parent])+ (modMask[parent] & (*(modSrc[PAN_MOD][firstChild[parent]])>>1)),27))<<5;
			int32_t L = ___SMMUL(sig,  kPan[parent])<<5;
			outlet_R += sig - L;
			outlet_L += L;
		} 
		
		
		/* uint8_t first = 0;
		for(uint8_t parent = 0; parent < POLY_CNT; parent++)
		{	
			
			uint8_t last = first + NOTES_CNT;
			int32_t combo = 0;
			for(uint8_t child = first; child < last; child++)
			{
				combo += lastSignal[child];
			}
			lastPolyCombo[parent] = combo;
			delay_lefts[delay_write][parent] = combo;
			int32_t sig = ___SMMUL(kMain[parent], delay_lefts[++delay_read_left[parent]][parent])<<1; 			
			int32_t L = ___SMMUL(sig,  kPan[parent])<<5;
		
			
			outlet_R += sig - L;
			outlet_L += L;
		}
		//memcpy(&delay_lefts[delay_write][0], lastPolyCombo, 64);
		for(uint8_t parent = POLY_CNT; parent < OSC_CNT; parent++)
		{	
			delay_lefts[delay_write][parent] = lastSignal[16 + parent];
			int32_t sig = ___SMMUL(kMain[parent], delay_lefts[++delay_read_left[parent]][parent])<<1; 			
			int32_t L = ___SMMUL(sig,  kPan[parent])<<5;
		
			
			outlet_R += sig - L;
			outlet_L += L;
		} */
		lastAudio[1] = AudioInputLeft[a_ind];
		lastAudio[2] = AudioInputRight[a_ind];
		lastAudio[0] = (lastAudio[1]) + (lastAudio[2]);
		++a_ind &= 0xF;
		
		outlet_R = ___SMMUL(outlet_R, kMainOut)<<1;
		outlet_L = ___SMMUL(outlet_L, kMainOut)<<1;
		
		//++delay_write;

	]]></code.srate>
	
    <code.midihandler><![CDATA[
		uint8_t status_type = status & 0xF0;
		if(status_type != 240)
		{
			addToNotesQueue(status, data1, data2);
			if(SHIFTMASK(MAINTOG, bitMidiThru))
			{
				if (status_type == MIDI_PROGRAM_CHANGE || status_type == MIDI_CHANNEL_PRESSURE) 
				{
					MidiSend2((midi_device_t) MIDI_DEVICE_DIN, 0, status, data1);
				}
				else
				{
					MidiSend3((midi_device_t) MIDI_DEVICE_DIN, 0, status, data1, data2);
				} 				
			}
		}


]]></code.midihandler>
   </obj.normal>
</objdefs>